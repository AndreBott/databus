#Welcome to the databus configuration.  First, you must understand the 2 modes that Databus can 
#work in(we may add a hbase mode and mongodb mode later as well)
# Mode 1: In memory databus where nosqltype.nosqltype=inmemory
# Mode 2: Single node cassandra database where nosqltype.nosqltype=cassandra

#NEXT, you need to understand that %prod.XXXXX are property overrides for when you run startProduction.sh
#For the databus developers/QA, we also have %qa.XXXX properties.  These are property overrides that are used when startQa.sh is called
#Lastly, for demo purposes, when startDemo.sh is run, the %demo.XXXXX properties are used
#NOTE: If you don't see a property %prod.NNNN, then the property NNNN is used by default.  All the %prod are just overrides on the defaults.

#This is for Active Directory.  Your IT should have an SRV record in DNS on the location of the AD server and port information.
#Supplying this domain allows us to use DNS to lookup the SRV record and find your Active Directory. 
domain=nrel.gov

admins=dhiller2,jcollins

# Database configuration
nosql.nosqltype=cassandra
nosql.cassandra.keyspace=databus
nosql.cassandra.clusterName=QAClusterB
nosql.cassandra.seeds=sdi-prod-01:9158,sdi-prod-02:9160,sdi-prod-03:9160,sdi-prod-04:9160
#if you have authentication enabled on the cassandra side (authenticator: PasswordAuthenticator)
#you can set username/password here.  If not(authenticator: AllowAllAuthenticator), 
#leave these commented out.
#nosql.cassandra.username=cassandra
#nosql.cassandra.password=cassandra

# GUI Charting enabled/disabled
#   - if enabled, which charting library
#       OPTIONS:    highcharts
#                   highcharts_licensed
#                   highcharts_disabled
gui.charting.library=highcharts_licensed

#demo.mode=true means populate tons of demo data(slow to startup first time) and ALSO means
#display help steps on logging in for the user to follow the demo better
demo.mode=false

#Email configuration for SMTP mail server so we can send email when a stream is down
email.host=sdi-ci
email.fromaddress=dean.hiller@nrel.gov

# Url-resolving in Jobs
# ~~~~~~
# When rendering templates with reverse-url-resoling (@@{..}) in Jobs (which do not have an inbound Http.Request),
# ie if sending a HtmlMail, Play need to know which url your users use when accessing your app.
# %test.application.baseUrl=http://localhost:9000/
application.baseUrl=http://sdi-prod-01:9000

#The url that we turn around and make requests to(service chaining)
application.requestUrl=http://localhost:9000

# This is the main configuration file for the application.
# ~~~~~
application.name=sdiwebapp
application.mode=prod

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions
# If you deploy your application to several instances be sure to use the same key !
application.secret=9lAKmZe1zQoiRknESDAhXnrVbwKBYURZlJVIaPkgpCgaH51aBQIMVZgmK5DxQqE2

# Date format
# ~~~~~
date.format=yyyy-MM-dd
# date.format.fr=dd/MM/yyyy

# Performance tuning section.  Ideal values here might depend a great deal on your hardware or network speed.
# ~~~~~~~~~~~~~~~~~
# upload configuration.  This is how many items go into each 'batch' to be processed simultaniously.
# This setting should always be larger than databus.commit.flush.size.  default 5000
socket.upload.batch.size=5000
# flush size for commits on large uploads.  default 2500
databus.commit.flush.size=2500
# Set this to the number of cores available, or # of cores-1 if you want the server to have some bandwith left over to handle other requests:
socket.upload.num.threads=4

# This is the size of the agressive pre-reader threads buffer.  It will read this number of items in advance of the thread that 
# sends the items back to the user.  Default:2000
databus.preread.buffer.size=2000
socket.upload.slurp.size=100000


# Server configuration
# ~~~~~
# If you need to change the HTTP port, uncomment this (default is set to 9000)
http.port=9000

#The values for this are all or none.  Set this to all if you are running a loadbalancer in front so
#the XForwardedSupport is there so play can tell if it http or https request to load balancer
XForwardedSupport=all

#
# By default the server listen for HTTP on the wilcard address.
# You can restrict this.
# http.address=127.0.0.1
#
# Session configuration
# ~~~~~~~~~~~~~~~~~~~~~~
# By default, session will be written to the transient PLAY_SESSION cookie.
# The cookies are not secured by default, only set it to true
# if you're serving your pages through https.
# application.session.cookie=PLAY
application.session.secure=false
application.session.maxAge=1h
application.session.httpOnly=true

# Session/Cookie sharing between subdomain
# ~~~~~~~~~~~~~~~~~~~~~~
# By default a cookie is only valid for a specific domain. By setting
# application.defaultCookieDomain to '.example.com', the cookies
# will be valid for all domains ending with '.example.com', ie:
# foo.example.com and bar.example.com
# application.defaultCookieDomain=.example.com

# Java source level => 1.5, 1.6 or 1.7 (experimental)
# java.source=1.5
java.source=1.6

# SOLR configuration
solr.mode=server
solr.url=http://sdi-prod-04:8983/solr
solr.queryRequestHandler=select
solr.defaultSearchField=allTerms_texts

#Every server polls the tables this rate(in millis)
monitor.rate=60000

# HTTP Response headers control for static files
# ~~~~~
# Set the default max-age, telling the user's browser how long it should cache the page.
# Default is 3600 (one hour). Set it to 0 to send no-cache.
# This is only read in prod mode, in dev mode the cache is disabled.
# http.cacheControl=3600

# Execution pool
# ~~~~~
# Default to 1 thread in DEV mode or (nb processors + 1) threads in PROD mode.
# Try to keep a low as possible. 1 thread will serialize all requests (very useful for debugging purpose)
# play.pool=3
#NOTE: We modify to 25 as when cassandra slows down, we can see the issue clearly otherwise we get requests waiting to start which we don't really
#want when we hit it for a test as we miss out on the real timing info(ie. wait long period then process it causes it to go fast...ask dean)
play.pool=25

#Don't touch this unless you know what you are doing.  
#It wires in the DatabusStreamChunkAggregator so that we can do 
#cunked uploads during file submits.
play.netty.pipeline=play.server.FlashPolicyHandler,org.jboss.netty.handler.codec.http.HttpRequestDecoder,server.DatabusStreamChunkAggregator,org.jboss.netty.handler.codec.http.HttpResponseEncoder,org.jboss.netty.handler.stream.ChunkedWriteHandler,play.server.PlayHandler
